#pragma once
#include <boost/python.hpp>
#include <boost/python/suite/indexing/map_indexing_suite.hpp>

#include "GameObject.h"
#include "GameUnit.h"
#include "GameChampion.h"
#include "GameMissile.h"
#include "GameSpell.h"
#include "GameBuff.h"
#include "GameItemSlot.h"

#include "SpellInfo.h"
#include "ItemInfo.h"
#include "UnitInfo.h"
#include "SpellCast.h"
#include "ObjectQuery.h"

#include "Color.h"

#include "PyExecutionContext.h"
#include "GameState.h"

using namespace boost::python;

/// Interfacing module between C++ & python
BOOST_PYTHON_MODULE(valkyrie) {

	register_exception_translator<QueryException>([](QueryException const& exc) { 
		PyErr_SetString(PyExc_RuntimeError, Strings::Format("Object Query Exception: %s", exc.what()).c_str());
	});
	
	class_<GameKeybind>("Keybind", "Contains game keybinds")
		.def_readonly("cast_q",              &GameKeybind::CastSpellQ)
		.def_readonly("cast_w",              &GameKeybind::CastSpellW)
		.def_readonly("cast_e",              &GameKeybind::CastSpellE)
		.def_readonly("cast_r",              &GameKeybind::CastSpellR)
		.def_readonly("cast_d",              &GameKeybind::CastSpellD)
		.def_readonly("cast_f",              &GameKeybind::CastSpellF)
										     
		.def_readonly("use_item_1",          &GameKeybind::UseItem1)
		.def_readonly("use_item_2",          &GameKeybind::UseItem2)
		.def_readonly("use_item_3",          &GameKeybind::UseItem3)
		.def_readonly("use_item_4",          &GameKeybind::UseItem4)
		.def_readonly("use_item_5",          &GameKeybind::UseItem5)
		.def_readonly("use_item_6",          &GameKeybind::UseItem6)
		.def_readonly("use_trinket",         &GameKeybind::UseItemTrinket)
										     
		.def_readonly("recall",              &GameKeybind::Recall)
		.def_readonly("target_champ_only",   &GameKeybind::TargetChampionsOnly)
		;

	class_<GameHud>("GameHud", "Contains info about the hud in the game")
		.def_readonly("minimap_pos",         &GameHud::minimapPosition,   "Position of the minimap on the screen")
		.def_readonly("minimap_size",        &GameHud::minimapSize,       "Size of the minimap on the screen")
		.def_readonly("chat_open",           &GameHud::isChatOpen,        "True if chat is open")
		;

	class_<RaycastResult>("RaycastResult", "Represents the result of a raycast")
		.def_readonly("point",               &RaycastResult::point,       "Point of raycast collision")
		.def_readonly("obj",                 &RaycastResult::GetObjectPy, "Object that the raycast collided with. None if it was a wall")
		;

	class_<FutureCollision>("FutureCollision", "Information about a future collision between a spell and a unit")
		.def_readonly("spell",               &FutureCollision::GetCastPy,          "The spell in the collision")
		.def_readonly("unit",                &FutureCollision::GetUnitPy,          "The unit in the collision")
		.def_readonly("unit_pos",            &FutureCollision::unitCollisionPoint, "The unit position at the moment of collision")
		.def_readonly("spell_pos",           &FutureCollision::castCollisionPoint, "The spell position at the moment of collision")
		.def_readonly("final",               &FutureCollision::isFinal,            "True if the projectile will not go further after this collision. Useful for drawing indicators")
		.def_readonly("time_until_impact",   &FutureCollision::timeUntilImpact,    "Time in seconds until the collision occurs")
		;

	class_<GameBuff>("Buff", "Contains data related to a buff on a champion")
		.def_readonly("name",                &GameBuff::name,        "Name of the buff")
		.def_readonly("time_begin",          &GameBuff::startTime,   "When the buff was received in game time")
		.def_readonly("time_end",            &GameBuff::endTime,     "When the buff will end in game time")
		.def_readonly("count",               &GameBuff::count,       "Number of stacks of the buff")
		;

	class_<UnitInfo>("UnitStatic",         "Static data loaded at runtime for an unit")
		.def_readonly("hp_bar_height",       &UnitInfo::healthBarHeight,     "The height at which the health bar starts")
		.def_readonly("movement_speed",      &UnitInfo::baseMovementSpeed,   "Base movement speed")
		.def_readonly("base_atk_range",      &UnitInfo::baseAttackRange,     "Base attack range")
		.def_readonly("base_atk_speed",      &UnitInfo::baseAttackSpeed,     "Base attack speed")
		.def_readonly("atk_speed_ratio",     &UnitInfo::attackSpeedRatio,    "Attack speed ratio")
											 
		.def_readonly("acquisition_radius",  &UnitInfo::acquisitionRange,    "Acquisition radius. See league wiki for more info")
		.def_readonly("selection_radius",    &UnitInfo::selectionRadius,     "Selection radius. See league wiki for more info")
		.def_readonly("pathing_radius",      &UnitInfo::pathRadius,          "Pathing radius. See league wiki for more info")
		.def_readonly("gameplay_radius",     &UnitInfo::gameplayRadius,      "Gameplay radius. See league wiki for more info")
											 
		.def_readonly("basic_atk",           &UnitInfo::GetBasicAttack,      "Default basic attack on the unit")
		.def_readonly("basic_atk_windup",    &UnitInfo::basicAttackWindup,   "Basic attack windup. See league wiki for more info")
		.def_readonly("basic_atk_cast_time", &UnitInfo::basicAttackCastTime, "Basic attack cast time. See league wiki for more info")
		;

	class_<GameItemSlot>("ItemSlot", "Represents an item slot")
		.def_readonly("charges",             &GameItemSlot::charges,          "Charges of item (example: corruption potion charges, number of red potions etc)")
		.def_readonly("item",                &GameItemSlot::GetItemPy,        "Static data of the item. If there is no item on the slot then this is None otherwise it is an ItemStatic instance")
		.def_readonly("active",              &GameItemSlot::GetActivePy,      "Spell active of the item. None if item doesnt have active")
		;

	class_<ItemInfo>("ItemStatic",        "Static data loaded at runtime for an item")
		.def_readonly("id",                &ItemInfo::id,                    "Item internal id")
		.def_readonly("cost",              &ItemInfo::cost,                  "Cost of item in gold coins")
		.def_readonly("mov_speed",         &ItemInfo::movementSpeed,         "Flat movement speed given by item")
		.def_readonly("health",            &ItemInfo::health,                "Flat health given by item")
		.def_readonly("crit",              &ItemInfo::crit,                  "Crit chance given by item")
		.def_readonly("ap",                &ItemInfo::abilityPower,          "Flat ability power given by item")
		.def_readonly("mana",              &ItemInfo::mana,                  "Flat mana given by item")
		.def_readonly("armor",             &ItemInfo::armour,                "Flat armour given by item")
		.def_readonly("magic_res",         &ItemInfo::magicResist,           "Flat magic resist given by item")
		.def_readonly("phys_dmg",          &ItemInfo::physicalDamage,        "Flat physical damage given by item")
		.def_readonly("atk_speed",         &ItemInfo::attackSpeed,           "Attack speed percent given by item")
		.def_readonly("life_steal",        &ItemInfo::lifeSteal,             "Life steal percent given by item")
		.def_readonly("hp_regen",          &ItemInfo::hpRegen,               "Health regen percent given by item")
		.def_readonly("mov_speed_percent", &ItemInfo::movementSpeedPercent,  "Movement speed percent given by item")
		;

	class_<SpellInfo>("SpellStatic",      "Static data loaded at runtime for a spell")
		.def_readonly("name",              &SpellInfo::name,                 "Name of the spell in lower case")
		.def_readonly("parent",            &SpellInfo::GetParentPy,          "SpellStatic of parent spell. This field is non empty for missile spells, the parent is the spell that created the missile")
		.def_readonly("icon",              &SpellInfo::icon,                 "Icon name of the spell in lowercase")
		.def_readonly("cast_time",         &SpellInfo::castTime,             "Cast time of spell")
		.def_readonly("cast_range",        &SpellInfo::castRange,            "Cast range of the spell. Can mean multiple things, the range of a skillshot or the cast range of targeted spell")
		.def_readonly("cast_radius",       &SpellInfo::castRadius,           "Cast radius of the spell (e.g Ziggs R area of effect)")
		.def_readonly("cast_cone_angle",   &SpellInfo::castConeAngle,        "If spell is conic this is the cone angle")
		.def_readonly("cast_cone_distance",&SpellInfo::castConeDistance,     "If the spell is conic this is the cone length")
		.def_readonly("delay",             &SpellInfo::delay,                "Additional delay besides the cast_time. Also if a missile has fixed travel time the value will be added here.")
		.def_readonly("width",             &SpellInfo::width,                "Width of the spell")
		.def_readonly("height_augment",    &SpellInfo::height,               "For drawing purposes. Height of the missile/spell must be augmented by this value")
		.def_readonly("speed",             &SpellInfo::speed,                "Speed of the spell. Used mostly by missile spells")
		.def("has_flag",                   &SpellInfo::HasFlag,              "Checks if the spell has the specified Spell flag")
		;

	class_<GameObject>("Obj",             "Represents the base of a ingame object. Most ingame objects derive from this.")
		.def_readonly("name",              &GameObject::name,                "Name of the object in lower case")
		.def_readonly("index",             &GameObject::index,               "Index of the object. This is not a unique id, you use this for targeted spells to find who the target is")
		.def_readonly("net_id",            &GameObject::networkId,           "Network id. This is a unique id of the object")
		.def_readonly("team",              &GameObject::team,                "Team of the object: possible values 100, 200 and 300 for jungle side. Use ally_to/enemy_to functions instead of this")
		.def_readonly("pos",               &GameObject::pos,                 "Position of the object")
		.def_readonly("visible",           &GameObject::isVisible,           "True if object is visible")
		.def_readonly("last_seen",         &GameObject::lastSeen,            "Timestamp in game time for when the object was last visible")
		.def_readonly("first_seen",        &GameObject::firstSeen,           "When the object was first seen")
		.def_readonly("dir",               &GameObject::dir,                 "Direction the object is facing as a normalized Vec3")
		.def_readonly("bounding_radius",   &GameObject::GetRadius,           "The bounding radius of the object a.k.a the hitbox (but its actually a circle)")
		
		.def("in_front_of",                &GameObject::InFrontOf,           "Checks if object is in front of")
		.def("ally_to",                    &GameObject::IsAllyTo,            "Checks if two objects are allied")
		.def("enemy_to",                   &GameObject::IsEnemyTo,           "Checks if two objects are enemies")
		.def("__eq__",                     &GameObject::EqualsTo,            "Checks if two object are identical by checking their network id")
		.def("menu_draw",                  &GameObject::ImGuiDraw,           "Draws the object in the current menu")
		;

	class_<GameSpell>("SpellObj",            "Represents a spell in game. In case of spells from items make sure level > 0 before casting it.")
		.def_readonly("name",              &GameSpell::name,                 "Name of the spell in lower case")
		.def_readonly("lvl",               &GameSpell::lvl,                  "Level of the spell. Has value 0 when spell is not learned")
		.def_readonly("ready_at",          &GameSpell::readyAt,              "Timestamp in game time for when the cooldown of the spell ends")
		.def_readonly("value",             &GameSpell::value,                "Value of spells. Holds the value of the spell for summoner spells like ignite/smite it holds the damage. For champion spells this value is usually 0")
		.def_readonly("cd",                &GameSpell::GetRemainingCooldown, "The remaining cooldown of the spell. Internally it is calculated using ready_at")
		.def_readonly("mana",              &GameSpell::mana,                 "Mana necessarry for casting the spell")
		.def_readonly("static",            &GameSpell::GetStaticData,        "Gets static information loaded at runtime about the spell. Can be None but normally shouldn't. If you find a object for which this is null please contact a dev")
		;

	class_<SpellCast>("SpellCast",         "Has data about a spell being cast.")
		.def_readonly("start_pos",         &SpellCast::start,                "Start position of the spell. Usually the position of the caster")
		.def_readonly("end_pos",           &SpellCast::end,                  "End position of the spell. Use this to get the direction of the spell. Remarks: this might not always be the real endpoint check SpellStatic project_endpoint field for more information.")
		.def_readonly("dir",               &SpellCast::dir,                  "Direction the spell is facing (in case of missiles)")
		.def_readonly("src_index",         &SpellCast::srcIndex,             "Index of the object who is casting")
		.def_readonly("dest_index",        &SpellCast::destIndex,            "If casting a targeted spell this holds the index of the target object")
		.def_readonly("time_begin",        &SpellCast::timeBegin,            "Start timestamp in game time of the casting")
		.def_readonly("cast_time",         &SpellCast::castTime,             "Total cast time")
		.def_readonly("remaining",         &SpellCast::RemainingCastTime,    "Remaining cast time. This can go into negatives since casts arent removed from memory always")
		.def_readonly("static",            &SpellCast::GetStaticData,        "Static data of the spell being cast. Can be None but normally shouldn't. If you find a object for which this is null please contact a dev")
		.def_readonly("name",              &SpellCast::name,                 "Name of the spell being cast")
		;

	class_<GameMissile, bases<GameObject>>("MissileObj")
		.def_readonly("spell",             &GameMissile::GetSpell,           "The spell of the missile. A spell can have multiple missiles. So this is not necessarily the spell that was cast.")
		;

	class_<GameUnit, bases<GameObject>>("UnitObj", "Represents a base unit object")
		.def_readonly("dead",              &GameUnit::isDead,                "Used to check if unit is dead")
		.def_readonly("targetable",        &GameUnit::targetable,            "Used to check if unit is targetable")
		.def_readonly("invulnerable",      &GameUnit::invulnerable,          "Used to check if unit is invulnerable")
		.def_readonly("mana",              &GameUnit::mana,                  "Current mana of the unit")
		.def_readonly("health",            &GameUnit::health,                "Current health of the unit")
		.def_readonly("max_health",        &GameUnit::maxHealth,             "Max health of the unit")
		.def_readonly("armor",             &GameUnit::armor,                 "Total armor of the unit")
		.def_readonly("magic_res",         &GameUnit::magicRes,              "Total magic resist of the unit")
		.def_readonly("atk",               &GameUnit::GetAttackDamage,       "Total attack damage of the unit")
		.def_readonly("lethality",         &GameUnit::lethality,             "Lethality of unit")
		.def_readonly("haste",             &GameUnit::haste,                 "Haste of unit")
		.def_readonly("cdr",               &GameUnit::GetCooldownReduction,  "Cooldown reduction of unit")
		.def_readonly("base_atk",          &GameUnit::baseAtk,               "Base physical damage of the unit")
		.def_readonly("move_speed",        &GameUnit::moveSpeed,             "Movement speed of the unit")
		.def_readonly("lvl",               &GameUnit::lvl,                   "Level of the unit")
		.def_readonly("expiry",            &GameUnit::expiry,                "Expiration duration in seconds. Used for units like wards")
		.def_readonly("crit",              &GameUnit::crit,                  "Crit chance of the unit as a decimal")
		.def_readonly("crit_multi",        &GameUnit::critMulti,             "Crit multi of the unit as a decimal")
		.def_readonly("ap",                &GameUnit::abilityPower,          "Flat ability power of the unit")
		.def_readonly("atk_speed_multi",   &GameUnit::atkSpeedMulti,         "Attack speed multiplier of the unit as a decimal. Multiply this with base attack speed to get current attack speed")
		.def_readonly("atk_range",         &GameUnit::attackRange,           "Attack range of the unit")
		.def_readonly("atk_speed",         &GameUnit::GetAttackSpeed,        "Calculates the attack speed of the unit")

		.def_readonly("bonus_move_speed",  &GameUnit::GetBonusMoveSpeed,     "Bonus move speed of unit")
		.def_readonly("bonus_armor",       &GameUnit::bonusArmor,            "Bonus armor of the unit")
		.def_readonly("bonus_magic_res",   &GameUnit::bonusMagicRes,         "Bonus magic resist of the unit")
		.def_readonly("bonus_atk",         &GameUnit::bonusAtk,              "Bonus physical damage of the unit (from items, buffs etc)")
		.def_readonly("bonus_atk_speed",   &GameUnit::GetBonusAttackSpeed,   "Bonus attack speed of the unit")

		.def_readonly("curr_casting",      &GameUnit::GetCastingSpell,       "Currently casting spell by the unit")
		.def_readonly("static",            &GameUnit::GetStaticData,         "Static data loaded at runtime of the unit. Can be None but normally shouldn't. If you find a object for which this is null please contact a dev")
		.def_readonly("is_ranged",         &GameUnit::IsRanged,              "True if unit is ranged")
		.def_readonly("buffs",             &GameUnit::BuffsToPy,             "List of all the buffs on the champion. Currently buffs are only read for the player champion and enemies due to performance reasons.")
		.def_readonly("moving",            &GameUnit::isMoving,              "True if unit is moving")
		.def_readonly("dashing",           &GameUnit::isDashing,             "True if unit is dashing")
		.def_readonly("dash_speed",        &GameUnit::dashSpeed,             "Similar to move speed but when dashing")
		.def_readonly("path",              &GameUnit::GetPathPy,             "Navigation path of the unit")
		.def_readonly("destination",       &GameUnit::destination,           "Navigation destination of the unit")

		.def("num_buff_stacks",            &GameUnit::BuffStackCount,          "Gets the number of stacks for the buff given by the name")
		.def("effective_phys_dmg",         &GameUnit::EffectivePhysicalDamage, "Calculates effective physical damage against target considering armor and armor penetration")
		.def("effective_magic_dmg",        &GameUnit::EffectiveMagicalDamage,  "Calculates effective magic damage against target considering magic res and magic res penetration")
		.def("has_tags",                   &GameUnit::HasTags,                 "Checks if the unit has unit tags (see Unit class)")
		.def("path_distance",              &GameUnit::CalculatePathLength,     "Calculates navigation path distance in game units")
		.def("predict_position",           &GameUnit::PredictPosition,         "Predicts position of unit in X seconds")
		.def("reskin",                     &GameUnit::Reskin,                  "Changes the skin of the unit")
		.def("has_buff",                   &GameUnit::HasBuff,                 "Check if champion has buff. The buff name is case sensitive")
		;

	class_<GameChampion, bases<GameUnit>>("ChampionObj", "Represents a champion object")
		.def("can_cast_spell",             &GameChampion::CanCast,           "Checks if champion can cast the GameSpell provided")
		.def_readonly("spells",            &GameChampion::SpellsToPy,        "List of all the champion spells. Remarks: First 4 spells are Q,W,E,R. Next two are D,F.The next 6 are item spells. Use Context.cast_spell to cast them. Only enemies and local player have item actives read for performance reasons")
		.def_readonly("item_slots",        &GameChampion::ItemsToPy,         "List of inventory slots. If an item is on the slot then the value is an Item object otherwise None. Only local player and enemies have items read for performance reasons")
		.def_readonly("hpbar_pos",         &GameChampion::GetHpBarPosition,  "Height position of the HP bar of the champion")
		.def_readonly("recalling",         &GameChampion::recalling,         "True if champion is recalling")
		.def_readonly("is_clone",          &GameChampion::IsClone,           "Checks if the champion is a clone")
		;

	class_<GameTurret, bases<GameUnit>>("TurretObj", "Represents a turret object")
		;

	class_<GameMinion, bases<GameUnit>>("MinionObj", "Represents a minion object")
		.def_readonly("hpbar_pos",         &GameMinion::GetHpBarPosition,    "Height position of the HP bar of the minion")
		;
	
	class_<GameJungle, bases<GameUnit>>("JungleMobObj", "Represents a jungle mob object")
		;

	class_<PyImGui>("UI", "Used to draw imgui backed UIs. Each method is more or less the equivalent of the original imgui method. Check imgui documentation for more info")
		.def("begin",                    &PyImGui::Begin)
		.def("begin",                    &PyImGui::BeginWithFlags)
		.def("beginchild",               &PyImGui::BeginChild)
		.def("endchild",                 &PyImGui::EndChild)
		.def("end",                      &PyImGui::End)
		.def("pushvar",                  &PyImGui::PushStyleV)
		.def("popvar",                   &PyImGui::PopStyleV)
				
		.def("help",                     &PyImGui::Help)
		.def("button",                   &PyImGui::Button)
		.def("button",                   &PyImGui::ColorButton)
		.def("colorpick",                &PyImGui::ColorPicker)
		.def("checkbox",                 &PyImGui::Checkbox)
		.def("text",                     &PyImGui::Text)
		.def("text",                     &PyImGui::TextColored)
		.def("labeltext",                &PyImGui::LabelText)
		.def("labeltext",                &PyImGui::LabelTextColored)
		.def("separator",                &PyImGui::Separator)
		.def("dragint",                  &PyImGui::DragInt,   PyImGui::DragIntOverloads())
		.def("dragfloat",                &PyImGui::DragFloat, PyImGui::DragFloatOverloads())
		.def("keyselect",                &PyImGui::KeySelect)
		.def("sliderfloat",              &PyImGui::SliderFloat)
		.def("sliderint",                &PyImGui::SliderInt)
		.def("sliderenum",               &PyImGui::SliderEnum)
		.def("progressbar",              &PyImGui::ProgressBar)
		.def("image",                    &PyImGui::Image,     PyImGui::ImageOverloads())

		.def("header",                   &PyImGui::CollapsingHeader)
		.def("treenode",                 &PyImGui::TreeNode)
		.def("treepop",                  &PyImGui::TreePop)
		.def("beginmenu",                &PyImGui::BeginMenu)
		.def("endmenu",                  &PyImGui::EndMenu)
		.def("opennext",                 &PyImGui::SetNextItemOpen)
		.def("openpopup",                &PyImGui::OpenPopup)
		.def("beginpopup",               &PyImGui::BeginPopup)
		.def("endpopup",                 &PyImGui::EndPopup)
		.def("beginmodal",               &PyImGui::BeginPopupModal)
		.def("closepopup",               &PyImGui::CloseCurrentPopup)
		.def("selectable",               &PyImGui::Selectable)

		.def("begintbl",                 &PyImGui::BeginTable)
		.def("endtbl",                   &PyImGui::EndTable)
		.def("tblnextrow",               &PyImGui::TableNextRow)
		.def("tblcolumn",                &PyImGui::TableSetColumn)
		.def("inputtext",                &PyImGui::InputText)
						                 
		.def("sameline",                 &PyImGui::SameLine)
		.def("begingroup",               &PyImGui::BeginGroup)
		.def("endgroup",                 &PyImGui::EndGroup)
						                 
		.def("listbox",                  &PyImGui::ListBox)
		.def("combo",                    &PyImGui::Combo)
		.def("demo",                     &PyImGui::Demo, "Shows the famous imgui demo")

		.def("pushid",                   &PyImGui::PushId)
		.def("popid",                    &PyImGui::PopId)
		.def("indent",                   &PyImGui::Indent)
		;

	class_<ObjectQuery>("ObjectQuery", "Used to query game objects by avoiding python to C++ call overhead.")
		.def("get",                      &ObjectQuery::GetResultsPy)
		.def("count",                    &ObjectQuery::Count)

		.def("has_tag",                  &ObjectQuery::HasTag,         return_value_policy<reference_existing_object>(),     "Query units with specified tag")
		.def("ally_to",                  &ObjectQuery::AllyTo,         return_value_policy<reference_existing_object>(),     "Query allies")
		.def("enemy_to",                 &ObjectQuery::EnemyTo,        return_value_policy<reference_existing_object>(),     "Query enemies")
		.def("near",                     &ObjectQuery::NearObj,        return_value_policy<reference_existing_object>(),     "Query objects within distance of another object")
		.def("near",                     &ObjectQuery::NearPoint,      return_value_policy<reference_existing_object>(),     "Query objects within distance of a point")
		.def("targetable",               &ObjectQuery::Targetable,     return_value_policy<reference_existing_object>(),     "Query targetable. Not equivalent to UnitObj.targetable. This checks if obj is alive, targetable and not invulnerable")
		.def("untargetable",             &ObjectQuery::Untargetable,   return_value_policy<reference_existing_object>(),     "Query untargetable")
		.def("visible",                  &ObjectQuery::Visible,        return_value_policy<reference_existing_object>(),     "Query objects in vision")
		.def("invisible",                &ObjectQuery::Invisible,      return_value_policy<reference_existing_object>(),     "Query objects out of vision")
		.def("alive",                    &ObjectQuery::Alive,          return_value_policy<reference_existing_object>(),     "Query alive objects")
		.def("dead",                     &ObjectQuery::Dead,           return_value_policy<reference_existing_object>(),     "Query dead objects")
		.def("clone",                    &ObjectQuery::IsClone,        return_value_policy<reference_existing_object>(),     "Query clone objects")
		.def("not_clone",                &ObjectQuery::IsNotClone,     return_value_policy<reference_existing_object>(),     "Query non clone objects")
		.def("on_screen",                &ObjectQuery::OnScreen,       return_value_policy<reference_existing_object>(),     "Query objects on screen")
		.def("casting",                  &ObjectQuery::IsCasting,      return_value_policy<reference_existing_object>(),     "Query units casting a spell")
		;


	class_<PyExecutionContext>("Context", "Contains everything necessarry to create scripts. From utility functions to game data")
		.def("info",                     &PyExecutionContext::LogInfo,           "Logs an info message to the console & file log")
		.def("warn",                     &PyExecutionContext::LogWarning,        "Logs a warning message to the console & file log")
		.def("error",                    &PyExecutionContext::LogError,          "Logs a error message to the console & file log. The file log will be flushed. Use this in absolute worse cases")
		.def_readonly("resources_loaded",&PyExecutionContext::everythingLoaded,  "True if all valkyrie resources are loaded (images/jsons etc)")
		.def_readonly("ui",              &PyExecutionContext::GetImGuiInterface, "UI interface for drawing menus based on imgui")
		.def_readonly("cfg",             &PyExecutionContext::GetConfig,         "The script config interface. Used to load/save settings")
		.def_readonly("time",            &PyExecutionContext::time,              "Current game duration in seconds")
		.def_readonly("ping",            &PyExecutionContext::ping,              "Current ping of the game")
		.def_readonly("cursor_pos",      &PyExecutionContext::GetMousePosition,  "Gets the current position of the mouse")

		.def_readonly("keybinds",        &PyExecutionContext::keybinds,          "Keybinds for casting spells/items etc")
		.def_readonly("hud",             &PyExecutionContext::gameHud,           "Gets the game HUD")
		.def_readonly("hovered",         &PyExecutionContext::hovered,           "Gets the game object under the mouse")
		.def_readonly("focused",         &PyExecutionContext::focused,           "Gets the game object focused (the object that was last clicked). None if last click was not on a object")
		.def_readonly("player",          &PyExecutionContext::player,            "The champion used by the local player. In replays this will be a random champion")
		.def_readonly("champs",          &PyExecutionContext::GetChampions,      "Returns champion query builder")
		.def_readonly("turrets",         &PyExecutionContext::GetTurrets,        "Returns turrets query builder")
		.def_readonly("missiles",        &PyExecutionContext::GetMissiles,       "Returns missiles query builder")
		.def_readonly("minions",         &PyExecutionContext::GetMinions,        "Returns minions query builder")
		.def_readonly("jungle",          &PyExecutionContext::GetJungle,         "Returns jungle monster query builder")
		.def_readonly("others",          &PyExecutionContext::GetOthers,         "Returns other uncategorized objects query builder")
		
		.def("obj_by_net_id",            &PyExecutionContext::GetObjectWithNetworkId, "Returns the objects with the specified network id or None")
		.def("raycast",                  &PyExecutionContext::Raycast,           "Launches a ray that stops on the first object specified by RayLayer")
		
		.def("is_wall_at",               &PyExecutionContext::IsWallAt,             "Checks if there is a wall at the specified position")
		.def("collisions_for",           &PyExecutionContext::GetCollisionsForUnit, "Gets a list of future collisions for a unit")
		.def("collisions_for",           &PyExecutionContext::GetCollisionsForCast, "Gets a list of future collisions for a spell cast")
		.def("attack",                   &PyExecutionContext::AttackUnit,        "Makes the player attack the given unit")
		.def("move",                     &PyExecutionContext::MoveToLocation,    "Moves the player to the given location")
		.def("move",                     &PyExecutionContext::MoveToMouse,       "Moves the player to where the mouse cursor is")
		.def("move_mouse",               &PyExecutionContext::MoveMouse,         "Moves the mouse location to the specified game world coordinate")
		.def("is_held",                  &PyExecutionContext::IsKeyDown,         "Checks if key is held down")
		.def("was_pressed",              &PyExecutionContext::WasKeyPressed,     "Checks if key was pressed")
		.def("set_key_active",           &PyExecutionContext::SetKeyActive,      "Programatically disable/enable game keys. This means nothing will happen in game when the key gets pressed but valkyrie will still recognize that key. Use ctx.keybinds to get keys")

		.def("start_channel",            &PyExecutionContext::StartChannel,      "Starts a channeled spell")
		.def("end_channel",              &PyExecutionContext::EndChannel,        "Ends and casts the channeled spell at the target location")
		.def("cast_spell",               &PyExecutionContext::CastSpell,         "Casts a spell on a location. If second argument is None, it will cast at the current mouse position. This function will check if spell is castable automatically. It doesnt check for item charge availability.")
		.def("predict_cast_point",       &PyExecutionContext::PredictCastPoint,  "Predicts a cast point such that the spell will hit the target. Returns None if doesnt find such a point")
		.def("get_spell_static",         &PyExecutionContext::GetSpellInfo,      "Gets static spell info. Argument must be lower case")

		.def("is_under_tower",           &PyExecutionContext::IsUnderTower,      "True if the game object is under tower")
		.def("is_at_spawn",              &PyExecutionContext::IsInFountain,      "Checks if the object is in the fountain of his team")
		.def("is_on_screen",             &PyExecutionContext::IsScreenPointOnScreen, PyExecutionContext::IsScreenPointOnScreenOverloads())
		.def("is_on_screen",             &PyExecutionContext::IsWorldPointOnScreen,  PyExecutionContext::IsWorldPointOnScreenOverloads())
		.def("w2s",                      &PyExecutionContext::World2Screen,      "Converts a world space point to screen space")
		.def("w2m",                      &PyExecutionContext::World2Minimap,     "Converts a world space point to minimap space")
		.def("d2m",                      &PyExecutionContext::DistanceOnMinimap, "Converts a distance value from world space to minimap space")
		
		.def("ping_normal",              &PyExecutionContext::PingNormal,        "Issues a `normal` ping at the target location. For this ping type riot moves the cursor position to the ping location after ping has been issued")
		.def("ping_warn",                &PyExecutionContext::PingWarn,          "Issues a `back` ping at the target location. For this ping type riot moves the cursor position to the ping location after ping has been issued")
		.def("ping_danger",              &PyExecutionContext::PingDanger,        "Issues a `danger` ping at the target location")
		.def("ping_mia",                 &PyExecutionContext::PingMia,           "Issues a `enemy missing` ping at the target location")
		.def("ping_omw",                 &PyExecutionContext::PingOmw,           "Issues a `on my way` ping at the target location")
		.def("ping_vision",              &PyExecutionContext::PingVision,        "Issues a `warded` ping at the target location")
		.def("ping_assist",              &PyExecutionContext::PingAssist,        "Issues a `help` ping at the target location")

		.def("hp_dmg_indicator",         &PyExecutionContext::DrawHpBarDamageIndicator, "Draws an damage indicator with a specified color for an amount of damage on a champion hp bar.")
		.def("line",                     &PyExecutionContext::DrawLine)
		.def("line",                     &PyExecutionContext::DrawLineWorld)
		.def("circle",                   &PyExecutionContext::DrawCircle)
		.def("circle_fill",              &PyExecutionContext::DrawCircleFilled)
		.def("circle",                   &PyExecutionContext::DrawCircleWorld)
		.def("circle_fill",              &PyExecutionContext::DrawCircleWorldFilled)
		.def("text",                     &PyExecutionContext::DrawTxt)
		.def("rect",                     &PyExecutionContext::DrawRect,             PyExecutionContext::DrawRectOverloads())
		.def("rect_fill",                &PyExecutionContext::DrawRectFilled,       PyExecutionContext::DrawRectFilledOverloads())
		.def("rect",                     &PyExecutionContext::DrawRectWorld)
		.def("triangle",                 &PyExecutionContext::DrawTriangleWorld)
		.def("triangle_fill",            &PyExecutionContext::DrawTriangleWorldFilled)
		.def("image",                    &PyExecutionContext::DrawImage)
		.def("image",                    &PyExecutionContext::DrawImageUVs)
		.def("image",                    &PyExecutionContext::DrawImageRounded)
		.def("image",                    &PyExecutionContext::DrawImageWorld)
		.def("image",                    &PyExecutionContext::DrawImageWorldPoints)
		.def("pill",                     &PyExecutionContext::Pill,             "Draws a pill with a text under the player. Pill positions are automatically managed each frame so that they dont overlap.")
		;

	class_<ConfigSet>("Config", "Interface for saving & loading script configurations")
		.def("set_int",                  &ConfigSet::SetInt,    "Saves an integer to the config file")
		.def("set_bool",                 &ConfigSet::SetBool,   "Saves a bool to the config file")
		.def("set_float",                &ConfigSet::SetFloat,  "Saves a float to the config file")
		.def("set_str",                  &ConfigSet::SetStr,    "Saves a string to the config file")
		.def("get_int",                  &ConfigSet::GetInt,    "Gets an integer from the config file")
		.def("get_bool",                 &ConfigSet::GetBool,	"Gets a bool from the config file")
		.def("get_float",                &ConfigSet::GetFloat,	"Gets a float from the config file")
		.def("get_str",                  &ConfigSet::GetStr,	"Gets a string from the config file")
		;

	class_<ImVec4>("Col", init<float, float, float, float>())
		.def_readonly("Black",           &Color::BLACK)
		.def_readonly("White",           &Color::WHITE)
		.def_readonly("Red",             &Color::RED)
		.def_readonly("DarkRed",         &Color::DARK_RED)
		.def_readonly("Green",           &Color::GREEN)
		.def_readonly("DarkGreen",       &Color::DARK_GREEN)
		.def_readonly("Yellow",          &Color::YELLOW)
		.def_readonly("DarkYellow",      &Color::DARK_YELLOW)
		.def_readonly("Cyan",            &Color::CYAN)
		.def_readonly("Purple",          &Color::PURPLE)
		.def_readonly("Gray",            &Color::GRAY)
		.def_readonly("Orange",          &Color::ORANGE)
		.def_readonly("Blue",            &Color::BLUE)
		.def_readonly("Brown",           &Color::BROWN)

		.def_readwrite("r",              &ImVec4::x,  "Red value of color")
		.def_readwrite("g",              &ImVec4::y,  "Green value of color")
		.def_readwrite("b",              &ImVec4::z,  "Blue value of color")
		.def_readwrite("a",              &ImVec4::w,  "Alpha value of color")
		;

	class_<Vector4>("Vec4", init<float, float, float, float>())
		.def_readwrite("x",              &Vector4::x)
		.def_readwrite("y",              &Vector4::y)
		.def_readwrite("z",              &Vector4::z)
		.def_readwrite("w",              &Vector4::w)
		.def("length",                   &Vector4::length)
		.def("normalize",                &Vector4::normalize)
		.def("distance",                 &Vector4::distance)
		.def("__mul__",                  &Vector4::scale)
		.def("__mul__",                  &Vector4::vscale)
		.def("__add__",                  &Vector4::add)
		.def("__sub__",                  &Vector4::sub)
		.def("clone",                    &Vector4::clone)
		;

	class_<Vector3>("Vec3", init<float, float, float>())
		.def_readwrite("x",              &Vector3::x)
		.def_readwrite("y",              &Vector3::y)
		.def_readwrite("z",              &Vector3::z)
		.def("length",                   &Vector3::length)
		.def("normalize",                &Vector3::normalize)
		.def("distance",                 &Vector3::distance)
		.def("__mul__",                  &Vector3::scale)
		.def("__mul__",                  &Vector3::vscale)
		.def("l1",                       &Vector3::l1,       "L1 Distance")
		.def("rotate_x",                 &Vector3::rotate_x, "Rotates the vector along the x axis")
		.def("rotate_y",                 &Vector3::rotate_y, "Rotates the vector along the y axis")
		.def("rotate_z",                 &Vector3::rotate_z, "Rotates the vector along the z axis")
		.def("__add__",                  &Vector3::add)
		.def("__sub__",                  &Vector3::sub)
		.def("angle",                    &Vector3::angle,    "Angle between two vectors")
		.def("dot",                      &Vector3::dot)
		.def("clone",                    &Vector3::clone)
		;

	class_<Vector2>("Vec2", init<float, float>())
		.def_readwrite("x",              &Vector2::x)
		.def_readwrite("y",              &Vector2::y)
		.def("length",                   &Vector2::length)
		.def("normalize",                &Vector2::normalize)
		.def("distance",                 &Vector2::distance)
		.def("__mul__",                  &Vector2::scale)
		.def("__mul__",                  &Vector2::vscale)
		.def("__add__",                  &Vector2::add)
		.def("__sub__",                  &Vector2::sub)
		.def("clone",                    &Vector2::clone)
		;

	enum_<ImGuiWindowFlags>("WindowFlag", "Represents imgui window flags. These support bitwise operations so WindowFlag.NoResize | WindowFlag.NoMove would yield a flag with both")
		.value("None",                      ImGuiWindowFlags_None)
		.value("NoTitleBar",                ImGuiWindowFlags_NoTitleBar)
		.value("NoResize",                  ImGuiWindowFlags_NoResize)
		.value("NoMove",                    ImGuiWindowFlags_NoMove)
		.value("NoScrollbar",               ImGuiWindowFlags_NoScrollbar)
		.value("NoScrollWithMouse",         ImGuiWindowFlags_NoScrollWithMouse)
		.value("NoCollapse",                ImGuiWindowFlags_NoCollapse)
		.value("AlwaysAutoResize",          ImGuiWindowFlags_AlwaysAutoResize)
		.value("NoBackground",              ImGuiWindowFlags_NoBackground)
		.value("NoSavedSettings",           ImGuiWindowFlags_NoSavedSettings)
		.value("NoMouseInputs",             ImGuiWindowFlags_NoMouseInputs)
		.value("MenuBar",                   ImGuiWindowFlags_MenuBar)
		.value("HorizontalScrollbar",       ImGuiWindowFlags_HorizontalScrollbar)
		.value("NoFocusOnAppearing",        ImGuiWindowFlags_NoFocusOnAppearing)
		.value("NoBringToFrontOnFocus",     ImGuiWindowFlags_NoBringToFrontOnFocus)
		.value("AlwaysVerticalScrollbar",   ImGuiWindowFlags_AlwaysVerticalScrollbar)
		.value("AlwaysHorizontalScrollbar", ImGuiWindowFlags_AlwaysHorizontalScrollbar)
		.value("AlwaysUseWindowPadding",    ImGuiWindowFlags_AlwaysUseWindowPadding)
		.value("NoNavInputs",               ImGuiWindowFlags_NoNavInputs)
		.value("NoNavFocus",                ImGuiWindowFlags_NoNavFocus)
		.value("UnsavedDocument",           ImGuiWindowFlags_UnsavedDocument)
		.value("NoNav",                     ImGuiWindowFlags_NoNav)
		.value("NoDecoration",              ImGuiWindowFlags_NoDecoration)
		.value("NoInputs",                  ImGuiWindowFlags_NoInputs)
		;

	enum_<RaycastLayer>("RayLayer", "Represents the objects that a raycast can intercept")
		.value("Champion",                  RayChampion)
		.value("Minion",                    RayMinion)
		.value("Turret",                    RayTurret)
		.value("Jungle",                    RayJungle)
		.value("Missile",                   RayMissile)
		.value("Other",                     RayOther)
		.value("Wall",                      RayWall)
		.value("Unit",                      RayUnit)
		.value("All",                       RayAll)
		.value("Enemy",                     RayEnemy)
		.value("Ally",                      RayAlly)
		;

	enum_<ImGuiStyleVar>("StyleVar")
		.value("Alpha",               ImGuiStyleVar_Alpha)
		.value("WindowPadding",       ImGuiStyleVar_WindowPadding)
		.value("WindowRounding",      ImGuiStyleVar_WindowRounding)
		.value("WindowBorderSize",    ImGuiStyleVar_WindowBorderSize)
		.value("WindowMinSize",       ImGuiStyleVar_WindowMinSize)
		.value("WindowTitleAlign",    ImGuiStyleVar_WindowTitleAlign)
		.value("ChildRounding",       ImGuiStyleVar_ChildRounding)
		.value("ChildBorderSize",     ImGuiStyleVar_ChildBorderSize)
		.value("PopupRounding",       ImGuiStyleVar_PopupRounding)
		.value("PopupBorderSize",     ImGuiStyleVar_PopupBorderSize)
		.value("FramePadding",        ImGuiStyleVar_FramePadding)
		.value("FrameRounding",       ImGuiStyleVar_FrameRounding)
		.value("FrameBorderSize",     ImGuiStyleVar_FrameBorderSize)
		.value("ItemSpacing",         ImGuiStyleVar_ItemSpacing)
		.value("ItemInnerSpacing",    ImGuiStyleVar_ItemInnerSpacing)
		.value("IndentSpacing",       ImGuiStyleVar_IndentSpacing)
		.value("CellPadding",         ImGuiStyleVar_CellPadding)
		.value("ScrollbarSize",       ImGuiStyleVar_ScrollbarSize)
		.value("ScrollbarRounding",   ImGuiStyleVar_ScrollbarRounding)
		.value("GrabMinSize",         ImGuiStyleVar_GrabMinSize)
		.value("GrabRounding",        ImGuiStyleVar_GrabRounding)
		.value("TabRounding",         ImGuiStyleVar_TabRounding)
		.value("ButtonTextAlign",     ImGuiStyleVar_ButtonTextAlign)
		.value("SelectableTextAlign", ImGuiStyleVar_SelectableTextAlign)
		;

	enum_<SpellFlags>("Spell", "Spell flags that specify behaviour and type of a spell")
		.value("CastPoint",       CastPoint)
		.value("CastAnywhere",    CastAnywhere)
		.value("CastTarget",      CastTarget)
		.value("CastDirection",   CastDirection)
								  
		.value("TypeLine",        TypeLine)
		.value("TypeArea",        TypeArea)
		.value("TypeCone",        TypeCone)

		.value("CollideWindwall", CollideWindwall)
		.value("CollideMinion",   CollideMinion)
		.value("CollideChampion", CollideChampion)
		.value("CollideMonster",  CollideMonster)

		.value("AffectMinion",    AffectMinion)
		.value("AffectChampion",  AffectChampion)
		.value("AffectMonster",   AffectMonster)

		.value("CollideCommon",   CollideCommon)
		.value("AffectAllUnits",  AffectAllUnits)

		.value("DashSkill",       DashSkill)
		.value("ChannelSkill",    ChannelSkill)
		;

	enum_<HKey>("Key", "Hardware key codes")
		.value("no_key",       NO_KEY)             
		.value("esc",          ESC)
		.value("1",            N_1)
		.value("2",            N_2)
		.value("3",            N_3)
		.value("4",            N_4)
		.value("5",            N_5)
		.value("6",            N_6)
		.value("7",            N_7)
		.value("8",            N_8)
		.value("9",            N_9)
		.value("0",            N_0)
		.value("minus",        MINUS)
		.value("equal",        EQUAL)
		.value("bs",           BS)
		.value("tab",          Tab)
		.value("q",            Q)
		.value("w",            W)
		.value("e",            E)
		.value("r",            R)
		.value("t",            T)
		.value("y",            Y)
		.value("u",            U)
		.value("i",            I)
		.value("o",            O)
		.value("p",            P)
		.value("lbracket",     LBRACKET)
		.value("rbracket",     RBRACKET)
		.value("enter",        ENTER)
		.value("ctrl",         CTRL)
		.value("a",            A)
		.value("s",            S)
		.value("d",            D)
		.value("f",            F)
		.value("g",            G)
		.value("h",            H)
		.value("j",            J)
		.value("k",            K)
		.value("l",            L)
		.value("semicolon",    SEMICOLON)
		.value("single_quote", SINGLE_QUOTE)
		.value("tilde",        TILDE)
		.value("lshift",       LSHIFT)
		.value("backslash",    BACKSLASH)
		.value("z",            Z)
		.value("x",            X)
		.value("c",            C)
		.value("v",            V)
		.value("b",            B)
		.value("n",            N)
		.value("m",            M)
		.value("comma",        COMMA)
		.value("dot",          DOT)
		.value("frontslash",   FRONTSLASH)
		.value("rshift",       RSHIFT)
		.value("print_screen", PRINT_SCREEN)
		.value("alt",          ALT)
		.value("space",        SPACE)
		.value("caps",         CAPS)
		.value("f1",           F1)
		.value("f2",           F2)
		.value("f3",           F3)
		.value("f4",           F4)
		.value("f5",           F5)
		.value("f6",           F6)
		.value("f7",           F7)
		.value("f8",           F8)
		.value("f9",           F9)
		.value("f10",          F10)
		.value("num",          NUM)
		.value("scroll",       SCROLL)
		.value("home",         HOME)
		.value("up",           UP)
		.value("page_up",      PAGE_UP)
		.value("num_minus",    NUM_MINUS)
		.value("left",         LEFT)
		.value("center",       CENTER)
		.value("right",        RIGHT)
		.value("plus",         PLUS)
		.value("end",          END)
		.value("down",         DOWN)
		.value("page_down",    PAGE_DOWN)
		.value("insert",       INSERT)
		.value("del",          DEL)                
		;
	
	enum_<UnitTag>("Unit", "Riot unit tags extracted from the game files. These are not compatible with bitwise operations so writing things like Unit.Monster | Unit.Plant will not yield a tag that has both of those.")
		.value("Champion",                    UnitTag::Unit_Champion)
		.value("ChampionClone",               UnitTag::Unit_Champion_Clone)
		.value("IsolationNonImpacting",       UnitTag::Unit_IsolationNonImpacting)
		.value("KingPoro",                    UnitTag::Unit_KingPoro)
		.value("Minion",                      UnitTag::Unit_Minion)
		.value("MinionLane",                  UnitTag::Unit_Minion_Lane)
		.value("MinionLaneMelee",             UnitTag::Unit_Minion_Lane_Melee)
		.value("MinionLaneRanged",            UnitTag::Unit_Minion_Lane_Ranged)
		.value("MinionLaneSiege",             UnitTag::Unit_Minion_Lane_Siege)
		.value("MinionLaneSuper",             UnitTag::Unit_Minion_Lane_Super)
		.value("MinionSummon",                UnitTag::Unit_Minion_Summon)
		.value("MinionSummon_Large",          UnitTag::Unit_Minion_Summon_Large)
		.value("Monster",                     UnitTag::Unit_Monster)
		.value("MonsterBlue",                 UnitTag::Unit_Monster_Blue)
		.value("MonsterBuff",                 UnitTag::Unit_Monster_Buff)
		.value("MonsterCamp",                 UnitTag::Unit_Monster_Camp)
		.value("MonsterCrab",                 UnitTag::Unit_Monster_Crab)
		.value("MonsterDragon",               UnitTag::Unit_Monster_Dragon)
		.value("MonsterEpic",                 UnitTag::Unit_Monster_Epic)
		.value("MonsterGromp",                UnitTag::Unit_Monster_Gromp)
		.value("MonsterKrug",                 UnitTag::Unit_Monster_Krug)
		.value("MonsterLarge",                UnitTag::Unit_Monster_Large)
		.value("MonsterMedium",               UnitTag::Unit_Monster_Medium)
		.value("MonsterRaptor",               UnitTag::Unit_Monster_Raptor)
		.value("MonsterRed",                  UnitTag::Unit_Monster_Red)
		.value("MonsterWolf",                 UnitTag::Unit_Monster_Wolf)
		.value("Plant",                       UnitTag::Unit_Plant)
		.value("Special",                     UnitTag::Unit_Special)
		.value("SpecialAzirR",                UnitTag::Unit_Special_AzirR)
		.value("SpecialAzirW",                UnitTag::Unit_Special_AzirW)
		.value("SpecialCorkiBomb",            UnitTag::Unit_Special_CorkiBomb)
		.value("SpecialEpicMonsterIgnores",   UnitTag::Unit_Special_EpicMonsterIgnores)
		.value("SpecialKPMinion",             UnitTag::Unit_Special_KPMinion)
		.value("SpecialMonsterIgnores",       UnitTag::Unit_Special_MonsterIgnores)
		.value("SpecialPeaceful",             UnitTag::Unit_Special_Peaceful)
		.value("SpecialSyndraSphere",         UnitTag::Unit_Special_SyndraSphere)
		.value("SpecialTeleportTarget",       UnitTag::Unit_Special_TeleportTarget)
		.value("SpecialTrap",                 UnitTag::Unit_Special_Trap)
		.value("SpecialTunnel",               UnitTag::Unit_Special_Tunnel)
		.value("SpecialTurretIgnores",        UnitTag::Unit_Special_TurretIgnores)
		.value("SpecialUntargetableBySpells", UnitTag::Unit_Special_UntargetableBySpells)
		.value("SpecialVoid",                 UnitTag::Unit_Special_Void)
		.value("SpecialYorickW",              UnitTag::Unit_Special_YorickW)
		.value("Structure",                   UnitTag::Unit_Structure)
		.value("StructureInhibitor",          UnitTag::Unit_Structure_Inhibitor)
		.value("StructureNexus",              UnitTag::Unit_Structure_Nexus)
		.value("StructureTurret",             UnitTag::Unit_Structure_Turret)
		.value("StructureTurretInhib",        UnitTag::Unit_Structure_Turret_Inhib)
		.value("StructureTurretInner",        UnitTag::Unit_Structure_Turret_Inner)
		.value("StructureTurretNexus",        UnitTag::Unit_Structure_Turret_Nexus)
		.value("StructureTurretOuter",        UnitTag::Unit_Structure_Turret_Outer)
		.value("StructureTurretShrine",       UnitTag::Unit_Structure_Turret_Shrine)
		.value("Ward",                        UnitTag::Unit_Ward)
		;
}